const sqlite = require('sqlite-async');

class Database {
	constructor(db_file) {
		this.db_file = db_file;
		this.db = undefined;
	}
	
	async connect() {
		this.db = await sqlite.open(this.db_file);
	}

	async migrate() {
		return this.db.exec(`
            DROP TABLE IF EXISTS users;

            CREATE TABLE IF NOT EXISTS users (
                id         INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                username   VARCHAR(255) NOT NULL UNIQUE,
                password   VARCHAR(255) NOT NULL,
                full_name VARCHAR(255),
                phone   VARCHAR(255),
                birth_date   VARCHAR(255),
                gender   VARCHAR(255),
                address_1   VARCHAR(255),
                address_2   VARCHAR(255),
                city   VARCHAR(255),
                state   VARCHAR(255),
                zip   VARCHAR(255),
                biography   VARCHAR(255),
                resume_file VARCHAR(256)
            );

            INSERT INTO users (username, password) VALUES ('admin', 'REDACTED_SECRET_0');

         `);
	}

	async registerUser(user, pass) {
		return new Promise(async (resolve, reject) => {
			try {
				let stmt = await this.db.prepare('INSERT INTO users (username, password) VALUES ( ?, ?)');
				resolve((await stmt.run(user, pass)));
			} catch(e) {
				reject(e);
			}
		});
	}

	async loginUser(user, pass) {
		return new Promise(async (resolve, reject) => {
			try {
				let stmt = await this.db.prepare('SELECT username FROM users WHERE username = ? and password = ?');
				resolve(await stmt.get(user, pass));
			} catch(e) {
				reject(e);
			}
		});
	}

	async getUser(user) {
		return new Promise(async (resolve, reject) => {
			try {
				let stmt = await this.db.prepare('SELECT * FROM users WHERE username = ?');
				resolve(await stmt.get(user));
			} catch(e) {
				reject(e);
			}
		});
	}

	async checkUser(user) {
		return new Promise(async (resolve, reject) => {
			try {
				let stmt = await this.db.prepare('SELECT username FROM users WHERE username = ?');
				let row = await stmt.get(user);
				resolve(row !== undefined);
			} catch(e) {
				reject(e);
			}
		});
	}

	async getFormData(username) {
		return new Promise(async (resolve, reject) => {
			try {
				let stmt = await this.db.prepare('SELECT * FROM users WHERE username = ?');
				resolve(await stmt.get(username));
			} catch(e) {
				reject(e);
			}
		});
	}

	async addRecord(userRecords, username) {
		return new Promise(async (resolve, reject) => {
			try {
				let validFields = "";
				let fieldRecords = [];
				for (const [ key, value ] of Object.entries(userRecords)) { 
					if (key.match(/^[a-z0-9_]+$/i)) {
						if(!['id','username','password','resume_file'].includes(key.toLowerCase())) {
							validFields += `, ${key} = ?`;
							fieldRecords.push(userRecords[key]);
						}
					}
				}
				let sqlQuery = `UPDATE users SET ${validFields.substring(1)} WHERE username = ?`;
				console.log(sqlQuery);
				let stmt = await this.db.prepare(sqlQuery);
				resolve(await stmt.run(...fieldRecords,username));
			} catch(e) {
				console.log(e);
				reject(e);
			}
		});
	}

	async setResume(filename, username) {
		return new Promise(async (resolve, reject) => {
			try {
				let stmt = await this.db.prepare('UPDATE users SET resume_file = ? WHERE username = ?');
				resolve((await stmt.run(filename, username)));
			} catch(e) {
				reject(e);
			}
		});
	}

}

module.exports = Database;
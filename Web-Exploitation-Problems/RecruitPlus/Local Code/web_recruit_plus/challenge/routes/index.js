const express        = require('express');
const router         = express.Router();
const fs             = require('fs');
const path           = require('path');
const JWTHelper      = require('../helpers/JWTHelper');
const AuthMiddleware = require('../middleware/AuthMiddleware');

let db;

const response = data => ({ message: data });

router.get('/', (req, res) => {
	return res.render('index.html');
});

router.post('/api/register', async (req, res) => {
	const { username, password } = req.body;
	if (username && password) {
		return db.checkUser(username)
			.then(user => {
				if (user) return res.status(401).send(response('User already registered!'));
				return db.registerUser(username, password)
					.then(()  => res.send(response('User registered successfully!')))
			})
			.catch(() => res.send(response('Something went wrong!')));
	}
	return res.status(401).send(response('Please fill out all the required fields!'));
});

router.post('/api/login', async (req, res) => {
	const { username, password } = req.body;
	if (username && password) {
		return db.loginUser(username, password)
			.then(user => {
				keyId = 'ff9738bf-1817-48b6-ad8d-578bff9cb6bf';
				privKey = path.join(__dirname, '/../private', `${keyId}.key`);
				pubKey = `${keyId}.pub`;
				secret = fs.readFileSync(privKey,'utf-8');
				token = JWTHelper.sign(
					{ username: user.username }, 
					secret, 
					pubKey
				);
				res.cookie('session', token, { maxAge: 3600000 });
				return res.send(response('User authenticated successfully!'));
			})
			.catch(() => res.status(403).send(response('Invalid username or password!')));
	}
	return res.status(500).send(response('Missing parameters!'));
});

router.get('/dashboard', AuthMiddleware, async (req, res, next) => {
	return db.getUser(req.data.username)
		.then(user => {
			if (user === undefined) return res.redirect('/');
			return db.getFormData(user.username)
				.then(formData => { 
					let flag = null;
					if (user.username == "admin") flag = fs.readFileSync('/flag', 'utf8');
					res.render('dashboard.html', { formData, flag });
				})
		})
		.catch(() => res.status(500).send(response('Something went wrong!')));
});

router.post('/api/enroll', AuthMiddleware, async (req, res) => {
	return db.getUser(req.data.username)
		.then(user => {
			if (user === undefined) return res.redirect('/'); 
			const jsonData = req.body;
			if (jsonData) {
				return db.addRecord(jsonData,user.username)
					.then(()  => res.send(response('Your information is saved successfully!')))	
			}
			return res.status(403).send(response('Missing parameters!'));
		})
		.catch(() => res.status(500).send(response('Something went wrong!')));
});

router.post('/api/upload', AuthMiddleware, async (req, res) => {
	return db.getUser(req.data.username)
		.then(user => {
			if (user === undefined) return res.redirect('/');
			if (!req.files || !req.files.resumeFile) return res.status(400).send(response('No files were uploaded.'));
			let resumeFile = req.files.resumeFile;
			if (!['doc','docx'].includes(resumeFile.name.split('.').slice(-1)[0])) {
				return res.status(403).send(response('The file must be a doc, or docx!'));
			}
			let filename = `${resumeFile.md5}.${resumeFile.name.split('.').slice(-1)[0]}`;
			uploadPath = path.join(__dirname, '/../uploads', filename);
			resumeFile.mv(uploadPath, (err) => {
				if (err) return res.status(500).send(response('Something went wrong!'));
			});
			if(user.resume_file && user.resume_file !== filename){
				fs.unlinkSync(path.join(__dirname, '/../uploads',user.resume_file));
			}
			db.setResume(filename,user.username)
				.then(() =>{
					res.send({'message':'Resume file uploaded successfully!','filename':filename});
				})
				.catch(() => res.status(500).send(response('Something went wrong!')));
		})
		.catch(err => res.status(500).send(response(err.message)));
});

router.get('/logout', (req, res) => {
	res.clearCookie('session');
	return res.redirect('/');
});

module.exports = database => { 
	db = database;
	return router;
};